// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/groupingFeeds.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateGroupingFeedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupingFeedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupingFeedRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupingFeedRequestMultiError, or nil if none found.
func (m *CreateGroupingFeedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupingFeedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetExtraData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGroupingFeedRequestValidationError{
					field:  "ExtraData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGroupingFeedRequestValidationError{
					field:  "ExtraData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtraData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGroupingFeedRequestValidationError{
				field:  "ExtraData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetKeyFormat()) < 1 {
		err := CreateGroupingFeedRequestValidationError{
			field:  "KeyFormat",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateGroupingFeedRequestMultiError(errors)
	}
	return nil
}

// CreateGroupingFeedRequestMultiError is an error wrapping multiple validation
// errors returned by CreateGroupingFeedRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateGroupingFeedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupingFeedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupingFeedRequestMultiError) AllErrors() []error { return m }

// CreateGroupingFeedRequestValidationError is the validation error returned by
// CreateGroupingFeedRequest.Validate if the designated constraints aren't met.
type CreateGroupingFeedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupingFeedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupingFeedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupingFeedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupingFeedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupingFeedRequestValidationError) ErrorName() string {
	return "CreateGroupingFeedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupingFeedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupingFeedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupingFeedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupingFeedRequestValidationError{}

// Validate checks the field values on CreateGroupingFeedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupingFeedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupingFeedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupingFeedResponseMultiError, or nil if none found.
func (m *CreateGroupingFeedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupingFeedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroupingFeed()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGroupingFeedResponseValidationError{
					field:  "GroupingFeed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGroupingFeedResponseValidationError{
					field:  "GroupingFeed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroupingFeed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGroupingFeedResponseValidationError{
				field:  "GroupingFeed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateGroupingFeedResponseMultiError(errors)
	}
	return nil
}

// CreateGroupingFeedResponseMultiError is an error wrapping multiple
// validation errors returned by CreateGroupingFeedResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateGroupingFeedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupingFeedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupingFeedResponseMultiError) AllErrors() []error { return m }

// CreateGroupingFeedResponseValidationError is the validation error returned
// by CreateGroupingFeedResponse.Validate if the designated constraints aren't met.
type CreateGroupingFeedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupingFeedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupingFeedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupingFeedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupingFeedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupingFeedResponseValidationError) ErrorName() string {
	return "CreateGroupingFeedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupingFeedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupingFeedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupingFeedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupingFeedResponseValidationError{}

// Validate checks the field values on GetGroupingFeedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupingFeedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupingFeedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupingFeedRequestMultiError, or nil if none found.
func (m *GetGroupingFeedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupingFeedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetGroupingFeedId()) < 1 {
		err := GetGroupingFeedRequestValidationError{
			field:  "GroupingFeedId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetGroupingFeedRequestMultiError(errors)
	}
	return nil
}

// GetGroupingFeedRequestMultiError is an error wrapping multiple validation
// errors returned by GetGroupingFeedRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGroupingFeedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupingFeedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupingFeedRequestMultiError) AllErrors() []error { return m }

// GetGroupingFeedRequestValidationError is the validation error returned by
// GetGroupingFeedRequest.Validate if the designated constraints aren't met.
type GetGroupingFeedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupingFeedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupingFeedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupingFeedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupingFeedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupingFeedRequestValidationError) ErrorName() string {
	return "GetGroupingFeedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupingFeedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupingFeedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupingFeedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupingFeedRequestValidationError{}

// Validate checks the field values on GetGroupingFeedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupingFeedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupingFeedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupingFeedResponseMultiError, or nil if none found.
func (m *GetGroupingFeedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupingFeedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroupingFeed()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGroupingFeedResponseValidationError{
					field:  "GroupingFeed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGroupingFeedResponseValidationError{
					field:  "GroupingFeed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroupingFeed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGroupingFeedResponseValidationError{
				field:  "GroupingFeed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGroupingFeedResponseMultiError(errors)
	}
	return nil
}

// GetGroupingFeedResponseMultiError is an error wrapping multiple validation
// errors returned by GetGroupingFeedResponse.ValidateAll() if the designated
// constraints aren't met.
type GetGroupingFeedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupingFeedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupingFeedResponseMultiError) AllErrors() []error { return m }

// GetGroupingFeedResponseValidationError is the validation error returned by
// GetGroupingFeedResponse.Validate if the designated constraints aren't met.
type GetGroupingFeedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupingFeedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupingFeedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupingFeedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupingFeedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupingFeedResponseValidationError) ErrorName() string {
	return "GetGroupingFeedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupingFeedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupingFeedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupingFeedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupingFeedResponseValidationError{}

// Validate checks the field values on GetGroupingFeedActivitiesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetGroupingFeedActivitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupingFeedActivitiesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetGroupingFeedActivitiesRequestMultiError, or nil if none found.
func (m *GetGroupingFeedActivitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupingFeedActivitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetGroupingFeedId()) < 1 {
		err := GetGroupingFeedActivitiesRequestValidationError{
			field:  "GroupingFeedId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Limit

	// no validation rules for OffsetId

	if len(errors) > 0 {
		return GetGroupingFeedActivitiesRequestMultiError(errors)
	}
	return nil
}

// GetGroupingFeedActivitiesRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetGroupingFeedActivitiesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGroupingFeedActivitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupingFeedActivitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupingFeedActivitiesRequestMultiError) AllErrors() []error { return m }

// GetGroupingFeedActivitiesRequestValidationError is the validation error
// returned by GetGroupingFeedActivitiesRequest.Validate if the designated
// constraints aren't met.
type GetGroupingFeedActivitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupingFeedActivitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupingFeedActivitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupingFeedActivitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupingFeedActivitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupingFeedActivitiesRequestValidationError) ErrorName() string {
	return "GetGroupingFeedActivitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupingFeedActivitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupingFeedActivitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupingFeedActivitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupingFeedActivitiesRequestValidationError{}

// Validate checks the field values on GetGroupingFeedActivitiesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetGroupingFeedActivitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupingFeedActivitiesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetGroupingFeedActivitiesResponseMultiError, or nil if none found.
func (m *GetGroupingFeedActivitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupingFeedActivitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetActivityGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupingFeedActivitiesResponseValidationError{
						field:  fmt.Sprintf("ActivityGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupingFeedActivitiesResponseValidationError{
						field:  fmt.Sprintf("ActivityGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupingFeedActivitiesResponseValidationError{
					field:  fmt.Sprintf("ActivityGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupingFeedActivitiesResponseMultiError(errors)
	}
	return nil
}

// GetGroupingFeedActivitiesResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetGroupingFeedActivitiesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetGroupingFeedActivitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupingFeedActivitiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupingFeedActivitiesResponseMultiError) AllErrors() []error { return m }

// GetGroupingFeedActivitiesResponseValidationError is the validation error
// returned by GetGroupingFeedActivitiesResponse.Validate if the designated
// constraints aren't met.
type GetGroupingFeedActivitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupingFeedActivitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupingFeedActivitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupingFeedActivitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupingFeedActivitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupingFeedActivitiesResponseValidationError) ErrorName() string {
	return "GetGroupingFeedActivitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupingFeedActivitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupingFeedActivitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupingFeedActivitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupingFeedActivitiesResponseValidationError{}

// Validate checks the field values on UpdateGroupingFeedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupingFeedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupingFeedRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupingFeedRequestMultiError, or nil if none found.
func (m *UpdateGroupingFeedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupingFeedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetGroupingFeedId()) < 1 {
		err := UpdateGroupingFeedRequestValidationError{
			field:  "GroupingFeedId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetExtraData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGroupingFeedRequestValidationError{
					field:  "ExtraData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGroupingFeedRequestValidationError{
					field:  "ExtraData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtraData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGroupingFeedRequestValidationError{
				field:  "ExtraData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateGroupingFeedRequestMultiError(errors)
	}
	return nil
}

// UpdateGroupingFeedRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateGroupingFeedRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateGroupingFeedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupingFeedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupingFeedRequestMultiError) AllErrors() []error { return m }

// UpdateGroupingFeedRequestValidationError is the validation error returned by
// UpdateGroupingFeedRequest.Validate if the designated constraints aren't met.
type UpdateGroupingFeedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupingFeedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupingFeedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupingFeedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupingFeedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupingFeedRequestValidationError) ErrorName() string {
	return "UpdateGroupingFeedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupingFeedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupingFeedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupingFeedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupingFeedRequestValidationError{}

// Validate checks the field values on UpdateGroupingFeedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupingFeedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupingFeedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupingFeedResponseMultiError, or nil if none found.
func (m *UpdateGroupingFeedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupingFeedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroupingFeed()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGroupingFeedResponseValidationError{
					field:  "GroupingFeed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGroupingFeedResponseValidationError{
					field:  "GroupingFeed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroupingFeed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGroupingFeedResponseValidationError{
				field:  "GroupingFeed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateGroupingFeedResponseMultiError(errors)
	}
	return nil
}

// UpdateGroupingFeedResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateGroupingFeedResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateGroupingFeedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupingFeedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupingFeedResponseMultiError) AllErrors() []error { return m }

// UpdateGroupingFeedResponseValidationError is the validation error returned
// by UpdateGroupingFeedResponse.Validate if the designated constraints aren't met.
type UpdateGroupingFeedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupingFeedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupingFeedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupingFeedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupingFeedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupingFeedResponseValidationError) ErrorName() string {
	return "UpdateGroupingFeedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupingFeedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupingFeedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupingFeedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupingFeedResponseValidationError{}

// Validate checks the field values on DeleteGroupingFeedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupingFeedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupingFeedRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupingFeedRequestMultiError, or nil if none found.
func (m *DeleteGroupingFeedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupingFeedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetGroupingFeedId()) < 1 {
		err := DeleteGroupingFeedRequestValidationError{
			field:  "GroupingFeedId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteGroupingFeedRequestMultiError(errors)
	}
	return nil
}

// DeleteGroupingFeedRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteGroupingFeedRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteGroupingFeedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupingFeedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupingFeedRequestMultiError) AllErrors() []error { return m }

// DeleteGroupingFeedRequestValidationError is the validation error returned by
// DeleteGroupingFeedRequest.Validate if the designated constraints aren't met.
type DeleteGroupingFeedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupingFeedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupingFeedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupingFeedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupingFeedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupingFeedRequestValidationError) ErrorName() string {
	return "DeleteGroupingFeedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupingFeedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupingFeedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupingFeedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupingFeedRequestValidationError{}

// Validate checks the field values on DeleteGroupingFeedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGroupingFeedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGroupingFeedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGroupingFeedResponseMultiError, or nil if none found.
func (m *DeleteGroupingFeedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGroupingFeedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteGroupingFeedResponseMultiError(errors)
	}
	return nil
}

// DeleteGroupingFeedResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteGroupingFeedResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteGroupingFeedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGroupingFeedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGroupingFeedResponseMultiError) AllErrors() []error { return m }

// DeleteGroupingFeedResponseValidationError is the validation error returned
// by DeleteGroupingFeedResponse.Validate if the designated constraints aren't met.
type DeleteGroupingFeedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupingFeedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupingFeedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupingFeedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupingFeedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupingFeedResponseValidationError) ErrorName() string {
	return "DeleteGroupingFeedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupingFeedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupingFeedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupingFeedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupingFeedResponseValidationError{}
