// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/activities.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddActivityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddActivityRequestMultiError, or nil if none found.
func (m *AddActivityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddActivityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFeedId()) < 1 {
		err := AddActivityRequestValidationError{
			field:  "FeedId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ObjectId

	// no validation rules for Time

	// no validation rules for UserId

	// no validation rules for ActivityType

	if all {
		switch v := interface{}(m.GetExtraData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddActivityRequestValidationError{
					field:  "ExtraData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddActivityRequestValidationError{
					field:  "ExtraData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtraData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddActivityRequestValidationError{
				field:  "ExtraData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ActivityId

	if len(errors) > 0 {
		return AddActivityRequestMultiError(errors)
	}
	return nil
}

// AddActivityRequestMultiError is an error wrapping multiple validation errors
// returned by AddActivityRequest.ValidateAll() if the designated constraints
// aren't met.
type AddActivityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddActivityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddActivityRequestMultiError) AllErrors() []error { return m }

// AddActivityRequestValidationError is the validation error returned by
// AddActivityRequest.Validate if the designated constraints aren't met.
type AddActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddActivityRequestValidationError) ErrorName() string {
	return "AddActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddActivityRequestValidationError{}

// Validate checks the field values on AddActivityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddActivityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddActivityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddActivityResponseMultiError, or nil if none found.
func (m *AddActivityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddActivityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetActivity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddActivityResponseValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddActivityResponseValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActivity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddActivityResponseValidationError{
				field:  "Activity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddActivityResponseMultiError(errors)
	}
	return nil
}

// AddActivityResponseMultiError is an error wrapping multiple validation
// errors returned by AddActivityResponse.ValidateAll() if the designated
// constraints aren't met.
type AddActivityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddActivityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddActivityResponseMultiError) AllErrors() []error { return m }

// AddActivityResponseValidationError is the validation error returned by
// AddActivityResponse.Validate if the designated constraints aren't met.
type AddActivityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddActivityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddActivityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddActivityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddActivityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddActivityResponseValidationError) ErrorName() string {
	return "AddActivityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddActivityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddActivityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddActivityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddActivityResponseValidationError{}

// Validate checks the field values on UpdateActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateActivityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateActivityRequestMultiError, or nil if none found.
func (m *UpdateActivityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateActivityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetActivityId()) < 1 {
		err := UpdateActivityRequestValidationError{
			field:  "ActivityId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetExtraData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateActivityRequestValidationError{
					field:  "ExtraData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateActivityRequestValidationError{
					field:  "ExtraData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtraData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateActivityRequestValidationError{
				field:  "ExtraData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateActivityRequestMultiError(errors)
	}
	return nil
}

// UpdateActivityRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateActivityRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateActivityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateActivityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateActivityRequestMultiError) AllErrors() []error { return m }

// UpdateActivityRequestValidationError is the validation error returned by
// UpdateActivityRequest.Validate if the designated constraints aren't met.
type UpdateActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateActivityRequestValidationError) ErrorName() string {
	return "UpdateActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateActivityRequestValidationError{}

// Validate checks the field values on UpdateActivityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateActivityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateActivityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateActivityResponseMultiError, or nil if none found.
func (m *UpdateActivityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateActivityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetActivity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateActivityResponseValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateActivityResponseValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActivity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateActivityResponseValidationError{
				field:  "Activity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateActivityResponseMultiError(errors)
	}
	return nil
}

// UpdateActivityResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateActivityResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateActivityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateActivityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateActivityResponseMultiError) AllErrors() []error { return m }

// UpdateActivityResponseValidationError is the validation error returned by
// UpdateActivityResponse.Validate if the designated constraints aren't met.
type UpdateActivityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateActivityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateActivityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateActivityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateActivityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateActivityResponseValidationError) ErrorName() string {
	return "UpdateActivityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateActivityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateActivityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateActivityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateActivityResponseValidationError{}

// Validate checks the field values on DeleteActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteActivityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteActivityRequestMultiError, or nil if none found.
func (m *DeleteActivityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteActivityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetActivityId()) < 1 {
		err := DeleteActivityRequestValidationError{
			field:  "ActivityId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteActivityRequestMultiError(errors)
	}
	return nil
}

// DeleteActivityRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteActivityRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteActivityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteActivityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteActivityRequestMultiError) AllErrors() []error { return m }

// DeleteActivityRequestValidationError is the validation error returned by
// DeleteActivityRequest.Validate if the designated constraints aren't met.
type DeleteActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteActivityRequestValidationError) ErrorName() string {
	return "DeleteActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteActivityRequestValidationError{}

// Validate checks the field values on DeleteActivityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteActivityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteActivityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteActivityResponseMultiError, or nil if none found.
func (m *DeleteActivityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteActivityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteActivityResponseMultiError(errors)
	}
	return nil
}

// DeleteActivityResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteActivityResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteActivityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteActivityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteActivityResponseMultiError) AllErrors() []error { return m }

// DeleteActivityResponseValidationError is the validation error returned by
// DeleteActivityResponse.Validate if the designated constraints aren't met.
type DeleteActivityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteActivityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteActivityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteActivityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteActivityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteActivityResponseValidationError) ErrorName() string {
	return "DeleteActivityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteActivityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteActivityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteActivityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteActivityResponseValidationError{}

// Validate checks the field values on GetActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetActivityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActivityRequestMultiError, or nil if none found.
func (m *GetActivityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActivityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetActivityId()) < 1 {
		err := GetActivityRequestValidationError{
			field:  "ActivityId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetActivityRequestMultiError(errors)
	}
	return nil
}

// GetActivityRequestMultiError is an error wrapping multiple validation errors
// returned by GetActivityRequest.ValidateAll() if the designated constraints
// aren't met.
type GetActivityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActivityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActivityRequestMultiError) AllErrors() []error { return m }

// GetActivityRequestValidationError is the validation error returned by
// GetActivityRequest.Validate if the designated constraints aren't met.
type GetActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActivityRequestValidationError) ErrorName() string {
	return "GetActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActivityRequestValidationError{}

// Validate checks the field values on GetActivityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetActivityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActivityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActivityResponseMultiError, or nil if none found.
func (m *GetActivityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActivityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetActivity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetActivityResponseValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetActivityResponseValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActivity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetActivityResponseValidationError{
				field:  "Activity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetActivityResponseMultiError(errors)
	}
	return nil
}

// GetActivityResponseMultiError is an error wrapping multiple validation
// errors returned by GetActivityResponse.ValidateAll() if the designated
// constraints aren't met.
type GetActivityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActivityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActivityResponseMultiError) AllErrors() []error { return m }

// GetActivityResponseValidationError is the validation error returned by
// GetActivityResponse.Validate if the designated constraints aren't met.
type GetActivityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActivityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActivityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActivityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActivityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActivityResponseValidationError) ErrorName() string {
	return "GetActivityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetActivityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActivityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActivityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActivityResponseValidationError{}

// Validate checks the field values on GetActivityByObjectIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetActivityByObjectIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActivityByObjectIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActivityByObjectIDRequestMultiError, or nil if none found.
func (m *GetActivityByObjectIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActivityByObjectIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetObjectId()) < 1 {
		err := GetActivityByObjectIDRequestValidationError{
			field:  "ObjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetActivityByObjectIDRequestMultiError(errors)
	}
	return nil
}

// GetActivityByObjectIDRequestMultiError is an error wrapping multiple
// validation errors returned by GetActivityByObjectIDRequest.ValidateAll() if
// the designated constraints aren't met.
type GetActivityByObjectIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActivityByObjectIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActivityByObjectIDRequestMultiError) AllErrors() []error { return m }

// GetActivityByObjectIDRequestValidationError is the validation error returned
// by GetActivityByObjectIDRequest.Validate if the designated constraints
// aren't met.
type GetActivityByObjectIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActivityByObjectIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActivityByObjectIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActivityByObjectIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActivityByObjectIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActivityByObjectIDRequestValidationError) ErrorName() string {
	return "GetActivityByObjectIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetActivityByObjectIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActivityByObjectIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActivityByObjectIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActivityByObjectIDRequestValidationError{}

// Validate checks the field values on GetActivityByObjectIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetActivityByObjectIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActivityByObjectIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetActivityByObjectIDResponseMultiError, or nil if none found.
func (m *GetActivityByObjectIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActivityByObjectIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetActivity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetActivityByObjectIDResponseValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetActivityByObjectIDResponseValidationError{
					field:  "Activity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActivity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetActivityByObjectIDResponseValidationError{
				field:  "Activity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetActivityByObjectIDResponseMultiError(errors)
	}
	return nil
}

// GetActivityByObjectIDResponseMultiError is an error wrapping multiple
// validation errors returned by GetActivityByObjectIDResponse.ValidateAll()
// if the designated constraints aren't met.
type GetActivityByObjectIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActivityByObjectIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActivityByObjectIDResponseMultiError) AllErrors() []error { return m }

// GetActivityByObjectIDResponseValidationError is the validation error
// returned by GetActivityByObjectIDResponse.Validate if the designated
// constraints aren't met.
type GetActivityByObjectIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActivityByObjectIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActivityByObjectIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActivityByObjectIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActivityByObjectIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActivityByObjectIDResponseValidationError) ErrorName() string {
	return "GetActivityByObjectIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetActivityByObjectIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActivityByObjectIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActivityByObjectIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActivityByObjectIDResponseValidationError{}
