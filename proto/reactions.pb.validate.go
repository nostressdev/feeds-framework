// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/reactions.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateReactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReactionRequestMultiError, or nil if none found.
func (m *CreateReactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateReactionRequestMultiError(errors)
	}
	return nil
}

// CreateReactionRequestMultiError is an error wrapping multiple validation
// errors returned by CreateReactionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateReactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReactionRequestMultiError) AllErrors() []error { return m }

// CreateReactionRequestValidationError is the validation error returned by
// CreateReactionRequest.Validate if the designated constraints aren't met.
type CreateReactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReactionRequestValidationError) ErrorName() string {
	return "CreateReactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReactionRequestValidationError{}

// Validate checks the field values on CreateReactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReactionResponseMultiError, or nil if none found.
func (m *CreateReactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateReactionResponseMultiError(errors)
	}
	return nil
}

// CreateReactionResponseMultiError is an error wrapping multiple validation
// errors returned by CreateReactionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateReactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReactionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReactionResponseMultiError) AllErrors() []error { return m }

// CreateReactionResponseValidationError is the validation error returned by
// CreateReactionResponse.Validate if the designated constraints aren't met.
type CreateReactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReactionResponseValidationError) ErrorName() string {
	return "CreateReactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReactionResponseValidationError{}

// Validate checks the field values on GetReationRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetReationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReationRequestMultiError, or nil if none found.
func (m *GetReationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetReationRequestMultiError(errors)
	}
	return nil
}

// GetReationRequestMultiError is an error wrapping multiple validation errors
// returned by GetReationRequest.ValidateAll() if the designated constraints
// aren't met.
type GetReationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReationRequestMultiError) AllErrors() []error { return m }

// GetReationRequestValidationError is the validation error returned by
// GetReationRequest.Validate if the designated constraints aren't met.
type GetReationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReationRequestValidationError) ErrorName() string {
	return "GetReationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReationRequestValidationError{}

// Validate checks the field values on GetReationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReationResponseMultiError, or nil if none found.
func (m *GetReationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetReationResponseMultiError(errors)
	}
	return nil
}

// GetReationResponseMultiError is an error wrapping multiple validation errors
// returned by GetReationResponse.ValidateAll() if the designated constraints
// aren't met.
type GetReationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReationResponseMultiError) AllErrors() []error { return m }

// GetReationResponseValidationError is the validation error returned by
// GetReationResponse.Validate if the designated constraints aren't met.
type GetReationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReationResponseValidationError) ErrorName() string {
	return "GetReationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReationResponseValidationError{}

// Validate checks the field values on UpdateReactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReactionRequestMultiError, or nil if none found.
func (m *UpdateReactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateReactionRequestMultiError(errors)
	}
	return nil
}

// UpdateReactionRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateReactionRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateReactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReactionRequestMultiError) AllErrors() []error { return m }

// UpdateReactionRequestValidationError is the validation error returned by
// UpdateReactionRequest.Validate if the designated constraints aren't met.
type UpdateReactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReactionRequestValidationError) ErrorName() string {
	return "UpdateReactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReactionRequestValidationError{}

// Validate checks the field values on UpdateReactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReactionResponseMultiError, or nil if none found.
func (m *UpdateReactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateReactionResponseMultiError(errors)
	}
	return nil
}

// UpdateReactionResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateReactionResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateReactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReactionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReactionResponseMultiError) AllErrors() []error { return m }

// UpdateReactionResponseValidationError is the validation error returned by
// UpdateReactionResponse.Validate if the designated constraints aren't met.
type UpdateReactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReactionResponseValidationError) ErrorName() string {
	return "UpdateReactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReactionResponseValidationError{}

// Validate checks the field values on DeleteReactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteReactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteReactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteReactionRequestMultiError, or nil if none found.
func (m *DeleteReactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteReactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteReactionRequestMultiError(errors)
	}
	return nil
}

// DeleteReactionRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteReactionRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteReactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteReactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteReactionRequestMultiError) AllErrors() []error { return m }

// DeleteReactionRequestValidationError is the validation error returned by
// DeleteReactionRequest.Validate if the designated constraints aren't met.
type DeleteReactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReactionRequestValidationError) ErrorName() string {
	return "DeleteReactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteReactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReactionRequestValidationError{}

// Validate checks the field values on DeleteReactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteReactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteReactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteReactionResponseMultiError, or nil if none found.
func (m *DeleteReactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteReactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteReactionResponseMultiError(errors)
	}
	return nil
}

// DeleteReactionResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteReactionResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteReactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteReactionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteReactionResponseMultiError) AllErrors() []error { return m }

// DeleteReactionResponseValidationError is the validation error returned by
// DeleteReactionResponse.Validate if the designated constraints aren't met.
type DeleteReactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReactionResponseValidationError) ErrorName() string {
	return "DeleteReactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteReactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReactionResponseValidationError{}
