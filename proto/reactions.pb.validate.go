// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/reactions.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateReactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReactionRequestMultiError, or nil if none found.
func (m *CreateReactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Time

	// no validation rules for UserId

	// no validation rules for ActivityType

	if all {
		switch v := interface{}(m.GetExtraData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateReactionRequestValidationError{
					field:  "ExtraData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateReactionRequestValidationError{
					field:  "ExtraData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtraData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReactionRequestValidationError{
				field:  "ExtraData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetLinkedActivityId()) < 1 {
		err := CreateReactionRequestValidationError{
			field:  "LinkedActivityId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateReactionRequestMultiError(errors)
	}
	return nil
}

// CreateReactionRequestMultiError is an error wrapping multiple validation
// errors returned by CreateReactionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateReactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReactionRequestMultiError) AllErrors() []error { return m }

// CreateReactionRequestValidationError is the validation error returned by
// CreateReactionRequest.Validate if the designated constraints aren't met.
type CreateReactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReactionRequestValidationError) ErrorName() string {
	return "CreateReactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReactionRequestValidationError{}

// Validate checks the field values on CreateReactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReactionResponseMultiError, or nil if none found.
func (m *CreateReactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReaction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateReactionResponseValidationError{
					field:  "Reaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateReactionResponseValidationError{
					field:  "Reaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReaction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReactionResponseValidationError{
				field:  "Reaction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateReactionResponseMultiError(errors)
	}
	return nil
}

// CreateReactionResponseMultiError is an error wrapping multiple validation
// errors returned by CreateReactionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateReactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReactionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReactionResponseMultiError) AllErrors() []error { return m }

// CreateReactionResponseValidationError is the validation error returned by
// CreateReactionResponse.Validate if the designated constraints aren't met.
type CreateReactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReactionResponseValidationError) ErrorName() string {
	return "CreateReactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReactionResponseValidationError{}

// Validate checks the field values on AddReactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddReactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddReactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddReactionRequestMultiError, or nil if none found.
func (m *AddReactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddReactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetReactionId()) < 1 {
		err := AddReactionRequestValidationError{
			field:  "ReactionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFeedId()) < 1 {
		err := AddReactionRequestValidationError{
			field:  "FeedId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddReactionRequestMultiError(errors)
	}
	return nil
}

// AddReactionRequestMultiError is an error wrapping multiple validation errors
// returned by AddReactionRequest.ValidateAll() if the designated constraints
// aren't met.
type AddReactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddReactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddReactionRequestMultiError) AllErrors() []error { return m }

// AddReactionRequestValidationError is the validation error returned by
// AddReactionRequest.Validate if the designated constraints aren't met.
type AddReactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddReactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddReactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddReactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddReactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddReactionRequestValidationError) ErrorName() string {
	return "AddReactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddReactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddReactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddReactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddReactionRequestValidationError{}

// Validate checks the field values on AddReactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddReactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddReactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddReactionResponseMultiError, or nil if none found.
func (m *AddReactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddReactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddReactionResponseMultiError(errors)
	}
	return nil
}

// AddReactionResponseMultiError is an error wrapping multiple validation
// errors returned by AddReactionResponse.ValidateAll() if the designated
// constraints aren't met.
type AddReactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddReactionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddReactionResponseMultiError) AllErrors() []error { return m }

// AddReactionResponseValidationError is the validation error returned by
// AddReactionResponse.Validate if the designated constraints aren't met.
type AddReactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddReactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddReactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddReactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddReactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddReactionResponseValidationError) ErrorName() string {
	return "AddReactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddReactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddReactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddReactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddReactionResponseValidationError{}

// Validate checks the field values on GetReactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReactionRequestMultiError, or nil if none found.
func (m *GetReactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetReactionId()) < 1 {
		err := GetReactionRequestValidationError{
			field:  "ReactionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetReactionRequestMultiError(errors)
	}
	return nil
}

// GetReactionRequestMultiError is an error wrapping multiple validation errors
// returned by GetReactionRequest.ValidateAll() if the designated constraints
// aren't met.
type GetReactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReactionRequestMultiError) AllErrors() []error { return m }

// GetReactionRequestValidationError is the validation error returned by
// GetReactionRequest.Validate if the designated constraints aren't met.
type GetReactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReactionRequestValidationError) ErrorName() string {
	return "GetReactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReactionRequestValidationError{}

// Validate checks the field values on GetReactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReactionResponseMultiError, or nil if none found.
func (m *GetReactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReaction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReactionResponseValidationError{
					field:  "Reaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReactionResponseValidationError{
					field:  "Reaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReaction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReactionResponseValidationError{
				field:  "Reaction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetReactionResponseMultiError(errors)
	}
	return nil
}

// GetReactionResponseMultiError is an error wrapping multiple validation
// errors returned by GetReactionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetReactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReactionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReactionResponseMultiError) AllErrors() []error { return m }

// GetReactionResponseValidationError is the validation error returned by
// GetReactionResponse.Validate if the designated constraints aren't met.
type GetReactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReactionResponseValidationError) ErrorName() string {
	return "GetReactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReactionResponseValidationError{}

// Validate checks the field values on GetActivityReactionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetActivityReactionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActivityReactionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActivityReactionsRequestMultiError, or nil if none found.
func (m *GetActivityReactionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActivityReactionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetActivityId()) < 1 {
		err := GetActivityReactionsRequestValidationError{
			field:  "ActivityId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Limit

	// no validation rules for OffsetId

	if len(errors) > 0 {
		return GetActivityReactionsRequestMultiError(errors)
	}
	return nil
}

// GetActivityReactionsRequestMultiError is an error wrapping multiple
// validation errors returned by GetActivityReactionsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetActivityReactionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActivityReactionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActivityReactionsRequestMultiError) AllErrors() []error { return m }

// GetActivityReactionsRequestValidationError is the validation error returned
// by GetActivityReactionsRequest.Validate if the designated constraints
// aren't met.
type GetActivityReactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActivityReactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActivityReactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActivityReactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActivityReactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActivityReactionsRequestValidationError) ErrorName() string {
	return "GetActivityReactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetActivityReactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActivityReactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActivityReactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActivityReactionsRequestValidationError{}

// Validate checks the field values on GetActivityReactionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetActivityReactionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActivityReactionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActivityReactionsResponseMultiError, or nil if none found.
func (m *GetActivityReactionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActivityReactionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetActivityReactionsResponseValidationError{
						field:  fmt.Sprintf("Reactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetActivityReactionsResponseValidationError{
						field:  fmt.Sprintf("Reactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetActivityReactionsResponseValidationError{
					field:  fmt.Sprintf("Reactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetActivityReactionsResponseMultiError(errors)
	}
	return nil
}

// GetActivityReactionsResponseMultiError is an error wrapping multiple
// validation errors returned by GetActivityReactionsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetActivityReactionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActivityReactionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActivityReactionsResponseMultiError) AllErrors() []error { return m }

// GetActivityReactionsResponseValidationError is the validation error returned
// by GetActivityReactionsResponse.Validate if the designated constraints
// aren't met.
type GetActivityReactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActivityReactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActivityReactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActivityReactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActivityReactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActivityReactionsResponseValidationError) ErrorName() string {
	return "GetActivityReactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetActivityReactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActivityReactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActivityReactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActivityReactionsResponseValidationError{}

// Validate checks the field values on UpdateReactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReactionRequestMultiError, or nil if none found.
func (m *UpdateReactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetReactionId()) < 1 {
		err := UpdateReactionRequestValidationError{
			field:  "ReactionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetExtraData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateReactionRequestValidationError{
					field:  "ExtraData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateReactionRequestValidationError{
					field:  "ExtraData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtraData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateReactionRequestValidationError{
				field:  "ExtraData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateReactionRequestMultiError(errors)
	}
	return nil
}

// UpdateReactionRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateReactionRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateReactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReactionRequestMultiError) AllErrors() []error { return m }

// UpdateReactionRequestValidationError is the validation error returned by
// UpdateReactionRequest.Validate if the designated constraints aren't met.
type UpdateReactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReactionRequestValidationError) ErrorName() string {
	return "UpdateReactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReactionRequestValidationError{}

// Validate checks the field values on UpdateReactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReactionResponseMultiError, or nil if none found.
func (m *UpdateReactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReaction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateReactionResponseValidationError{
					field:  "Reaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateReactionResponseValidationError{
					field:  "Reaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReaction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateReactionResponseValidationError{
				field:  "Reaction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateReactionResponseMultiError(errors)
	}
	return nil
}

// UpdateReactionResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateReactionResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateReactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReactionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReactionResponseMultiError) AllErrors() []error { return m }

// UpdateReactionResponseValidationError is the validation error returned by
// UpdateReactionResponse.Validate if the designated constraints aren't met.
type UpdateReactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReactionResponseValidationError) ErrorName() string {
	return "UpdateReactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReactionResponseValidationError{}

// Validate checks the field values on DeleteReactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteReactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteReactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteReactionRequestMultiError, or nil if none found.
func (m *DeleteReactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteReactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetReactionId()) < 1 {
		err := DeleteReactionRequestValidationError{
			field:  "ReactionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteReactionRequestMultiError(errors)
	}
	return nil
}

// DeleteReactionRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteReactionRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteReactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteReactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteReactionRequestMultiError) AllErrors() []error { return m }

// DeleteReactionRequestValidationError is the validation error returned by
// DeleteReactionRequest.Validate if the designated constraints aren't met.
type DeleteReactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReactionRequestValidationError) ErrorName() string {
	return "DeleteReactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteReactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReactionRequestValidationError{}

// Validate checks the field values on DeleteReactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteReactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteReactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteReactionResponseMultiError, or nil if none found.
func (m *DeleteReactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteReactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteReactionResponseMultiError(errors)
	}
	return nil
}

// DeleteReactionResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteReactionResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteReactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteReactionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteReactionResponseMultiError) AllErrors() []error { return m }

// DeleteReactionResponseValidationError is the validation error returned by
// DeleteReactionResponse.Validate if the designated constraints aren't met.
type DeleteReactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReactionResponseValidationError) ErrorName() string {
	return "DeleteReactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteReactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReactionResponseValidationError{}
