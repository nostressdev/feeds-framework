// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: api/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_api_service_proto protoreflect.FileDescriptor

var file_api_service_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65,
	0x64, 0x1a, 0x13, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xe3, 0x11,
	0x0a, 0x05, 0x46, 0x65, 0x65, 0x64, 0x73, 0x12, 0x54, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x20, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73,
	0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f,
	0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x20, 0x2e, 0x73,
	0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x42, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x2e, 0x73,
	0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f,
	0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x42, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x23, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x23, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f,
	0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x65, 0x65, 0x64, 0x12, 0x1f, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x46,
	0x65, 0x65, 0x64, 0x12, 0x1c, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b,
	0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x65, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x12, 0x1f, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f,
	0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x12, 0x1f, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73,
	0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x63, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x21, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f,
	0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57,
	0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x21,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x21, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b,
	0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5d, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b,
	0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x51, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5d, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f,
	0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x69, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x46, 0x65, 0x65, 0x64, 0x12, 0x27, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73,
	0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x64, 0x12, 0x24,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x46,
	0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x46,
	0x65, 0x65, 0x64, 0x12, 0x27, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x67, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73,
	0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x64, 0x12, 0x27,
	0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x6f, 0x6b,
	0x73, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_api_service_proto_goTypes = []interface{}{
	(*AddActivityRequest)(nil),                // 0: syntoks_feed.AddActivityRequest
	(*GetActivityRequest)(nil),                // 1: syntoks_feed.GetActivityRequest
	(*GetActivityByObjectIDRequest)(nil),      // 2: syntoks_feed.GetActivityByObjectIDRequest
	(*UpdateActivityRequest)(nil),             // 3: syntoks_feed.UpdateActivityRequest
	(*DeleteActivityRequest)(nil),             // 4: syntoks_feed.DeleteActivityRequest
	(*CreateFeedRequest)(nil),                 // 5: syntoks_feed.CreateFeedRequest
	(*GetFeedRequest)(nil),                    // 6: syntoks_feed.GetFeedRequest
	(*GetFeedActivitiesRequest)(nil),          // 7: syntoks_feed.GetFeedActivitiesRequest
	(*UpdateFeedRequest)(nil),                 // 8: syntoks_feed.UpdateFeedRequest
	(*DeleteFeedRequest)(nil),                 // 9: syntoks_feed.DeleteFeedRequest
	(*CreateCollectionRequest)(nil),           // 10: syntoks_feed.CreateCollectionRequest
	(*CreateObjectRequest)(nil),               // 11: syntoks_feed.CreateObjectRequest
	(*GetObjectRequest)(nil),                  // 12: syntoks_feed.GetObjectRequest
	(*UpdateObjectRequest)(nil),               // 13: syntoks_feed.UpdateObjectRequest
	(*DeleteObjectRequest)(nil),               // 14: syntoks_feed.DeleteObjectRequest
	(*CreateReactionRequest)(nil),             // 15: syntoks_feed.CreateReactionRequest
	(*GetReationRequest)(nil),                 // 16: syntoks_feed.GetReationRequest
	(*UpdateReactionRequest)(nil),             // 17: syntoks_feed.UpdateReactionRequest
	(*DeleteReactionRequest)(nil),             // 18: syntoks_feed.DeleteReactionRequest
	(*CreateGroupingFeedRequest)(nil),         // 19: syntoks_feed.CreateGroupingFeedRequest
	(*GetGroupingFeedRequest)(nil),            // 20: syntoks_feed.GetGroupingFeedRequest
	(*GetGroupingFeedActivitiesRequest)(nil),  // 21: syntoks_feed.GetGroupingFeedActivitiesRequest
	(*UpdateGroupingFeedRequest)(nil),         // 22: syntoks_feed.UpdateGroupingFeedRequest
	(*DeleteGroupingFeedRequest)(nil),         // 23: syntoks_feed.DeleteGroupingFeedRequest
	(*AddActivityResponse)(nil),               // 24: syntoks_feed.AddActivityResponse
	(*GetActivityResponse)(nil),               // 25: syntoks_feed.GetActivityResponse
	(*GetActivityByObjectIDResponse)(nil),     // 26: syntoks_feed.GetActivityByObjectIDResponse
	(*UpdateActivityResponse)(nil),            // 27: syntoks_feed.UpdateActivityResponse
	(*DeleteActivityResponse)(nil),            // 28: syntoks_feed.DeleteActivityResponse
	(*CreateFeedResponse)(nil),                // 29: syntoks_feed.CreateFeedResponse
	(*GetFeedResponse)(nil),                   // 30: syntoks_feed.GetFeedResponse
	(*GetFeedActivitiesResponse)(nil),         // 31: syntoks_feed.GetFeedActivitiesResponse
	(*UpdateFeedResponse)(nil),                // 32: syntoks_feed.UpdateFeedResponse
	(*DeleteFeedResponse)(nil),                // 33: syntoks_feed.DeleteFeedResponse
	(*CreateCollectionResponse)(nil),          // 34: syntoks_feed.CreateCollectionResponse
	(*CreateObjectResponse)(nil),              // 35: syntoks_feed.CreateObjectResponse
	(*GetObjectResponse)(nil),                 // 36: syntoks_feed.GetObjectResponse
	(*UpdateObjectResponse)(nil),              // 37: syntoks_feed.UpdateObjectResponse
	(*DeleteObjectResponse)(nil),              // 38: syntoks_feed.DeleteObjectResponse
	(*CreateReactionResponse)(nil),            // 39: syntoks_feed.CreateReactionResponse
	(*GetReationResponse)(nil),                // 40: syntoks_feed.GetReationResponse
	(*UpdateReactionResponse)(nil),            // 41: syntoks_feed.UpdateReactionResponse
	(*DeleteReactionResponse)(nil),            // 42: syntoks_feed.DeleteReactionResponse
	(*CreateGroupingFeedResponse)(nil),        // 43: syntoks_feed.CreateGroupingFeedResponse
	(*GetGroupingFeedResponse)(nil),           // 44: syntoks_feed.GetGroupingFeedResponse
	(*GetGroupingFeedActivitiesResponse)(nil), // 45: syntoks_feed.GetGroupingFeedActivitiesResponse
	(*UpdateGroupingFeedResponse)(nil),        // 46: syntoks_feed.UpdateGroupingFeedResponse
	(*DeleteGroupingFeedResponse)(nil),        // 47: syntoks_feed.DeleteGroupingFeedResponse
}
var file_api_service_proto_depIdxs = []int32{
	0,  // 0: syntoks_feed.Feeds.AddActivity:input_type -> syntoks_feed.AddActivityRequest
	1,  // 1: syntoks_feed.Feeds.GetActivity:input_type -> syntoks_feed.GetActivityRequest
	2,  // 2: syntoks_feed.Feeds.GetActivityByObjectID:input_type -> syntoks_feed.GetActivityByObjectIDRequest
	3,  // 3: syntoks_feed.Feeds.UpdateActivity:input_type -> syntoks_feed.UpdateActivityRequest
	4,  // 4: syntoks_feed.Feeds.DeleteActivity:input_type -> syntoks_feed.DeleteActivityRequest
	5,  // 5: syntoks_feed.Feeds.CreateFeed:input_type -> syntoks_feed.CreateFeedRequest
	6,  // 6: syntoks_feed.Feeds.GetFeed:input_type -> syntoks_feed.GetFeedRequest
	7,  // 7: syntoks_feed.Feeds.GetFeedActivities:input_type -> syntoks_feed.GetFeedActivitiesRequest
	8,  // 8: syntoks_feed.Feeds.UpdateFeed:input_type -> syntoks_feed.UpdateFeedRequest
	9,  // 9: syntoks_feed.Feeds.DeleteFeed:input_type -> syntoks_feed.DeleteFeedRequest
	10, // 10: syntoks_feed.Feeds.CreateCollection:input_type -> syntoks_feed.CreateCollectionRequest
	11, // 11: syntoks_feed.Feeds.CreateObject:input_type -> syntoks_feed.CreateObjectRequest
	12, // 12: syntoks_feed.Feeds.GetObject:input_type -> syntoks_feed.GetObjectRequest
	13, // 13: syntoks_feed.Feeds.UpdateObject:input_type -> syntoks_feed.UpdateObjectRequest
	14, // 14: syntoks_feed.Feeds.DeleteObject:input_type -> syntoks_feed.DeleteObjectRequest
	15, // 15: syntoks_feed.Feeds.CreateReaction:input_type -> syntoks_feed.CreateReactionRequest
	16, // 16: syntoks_feed.Feeds.GetReation:input_type -> syntoks_feed.GetReationRequest
	17, // 17: syntoks_feed.Feeds.UpdateReaction:input_type -> syntoks_feed.UpdateReactionRequest
	18, // 18: syntoks_feed.Feeds.DeleteReaction:input_type -> syntoks_feed.DeleteReactionRequest
	19, // 19: syntoks_feed.Feeds.CreateGroupingFeed:input_type -> syntoks_feed.CreateGroupingFeedRequest
	20, // 20: syntoks_feed.Feeds.GetGroupingFeed:input_type -> syntoks_feed.GetGroupingFeedRequest
	21, // 21: syntoks_feed.Feeds.GetGroupingFeedActivities:input_type -> syntoks_feed.GetGroupingFeedActivitiesRequest
	22, // 22: syntoks_feed.Feeds.UpdateGroupingFeed:input_type -> syntoks_feed.UpdateGroupingFeedRequest
	23, // 23: syntoks_feed.Feeds.DeleteGroupingFeed:input_type -> syntoks_feed.DeleteGroupingFeedRequest
	24, // 24: syntoks_feed.Feeds.AddActivity:output_type -> syntoks_feed.AddActivityResponse
	25, // 25: syntoks_feed.Feeds.GetActivity:output_type -> syntoks_feed.GetActivityResponse
	26, // 26: syntoks_feed.Feeds.GetActivityByObjectID:output_type -> syntoks_feed.GetActivityByObjectIDResponse
	27, // 27: syntoks_feed.Feeds.UpdateActivity:output_type -> syntoks_feed.UpdateActivityResponse
	28, // 28: syntoks_feed.Feeds.DeleteActivity:output_type -> syntoks_feed.DeleteActivityResponse
	29, // 29: syntoks_feed.Feeds.CreateFeed:output_type -> syntoks_feed.CreateFeedResponse
	30, // 30: syntoks_feed.Feeds.GetFeed:output_type -> syntoks_feed.GetFeedResponse
	31, // 31: syntoks_feed.Feeds.GetFeedActivities:output_type -> syntoks_feed.GetFeedActivitiesResponse
	32, // 32: syntoks_feed.Feeds.UpdateFeed:output_type -> syntoks_feed.UpdateFeedResponse
	33, // 33: syntoks_feed.Feeds.DeleteFeed:output_type -> syntoks_feed.DeleteFeedResponse
	34, // 34: syntoks_feed.Feeds.CreateCollection:output_type -> syntoks_feed.CreateCollectionResponse
	35, // 35: syntoks_feed.Feeds.CreateObject:output_type -> syntoks_feed.CreateObjectResponse
	36, // 36: syntoks_feed.Feeds.GetObject:output_type -> syntoks_feed.GetObjectResponse
	37, // 37: syntoks_feed.Feeds.UpdateObject:output_type -> syntoks_feed.UpdateObjectResponse
	38, // 38: syntoks_feed.Feeds.DeleteObject:output_type -> syntoks_feed.DeleteObjectResponse
	39, // 39: syntoks_feed.Feeds.CreateReaction:output_type -> syntoks_feed.CreateReactionResponse
	40, // 40: syntoks_feed.Feeds.GetReation:output_type -> syntoks_feed.GetReationResponse
	41, // 41: syntoks_feed.Feeds.UpdateReaction:output_type -> syntoks_feed.UpdateReactionResponse
	42, // 42: syntoks_feed.Feeds.DeleteReaction:output_type -> syntoks_feed.DeleteReactionResponse
	43, // 43: syntoks_feed.Feeds.CreateGroupingFeed:output_type -> syntoks_feed.CreateGroupingFeedResponse
	44, // 44: syntoks_feed.Feeds.GetGroupingFeed:output_type -> syntoks_feed.GetGroupingFeedResponse
	45, // 45: syntoks_feed.Feeds.GetGroupingFeedActivities:output_type -> syntoks_feed.GetGroupingFeedActivitiesResponse
	46, // 46: syntoks_feed.Feeds.UpdateGroupingFeed:output_type -> syntoks_feed.UpdateGroupingFeedResponse
	47, // 47: syntoks_feed.Feeds.DeleteGroupingFeed:output_type -> syntoks_feed.DeleteGroupingFeedResponse
	24, // [24:48] is the sub-list for method output_type
	0,  // [0:24] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_api_service_proto_init() }
func file_api_service_proto_init() {
	if File_api_service_proto != nil {
		return
	}
	file_api_reactions_proto_init()
	file_api_groupingFeeds_proto_init()
	file_api_activities_proto_init()
	file_api_collections_proto_init()
	file_api_feeds_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_service_proto_goTypes,
		DependencyIndexes: file_api_service_proto_depIdxs,
	}.Build()
	File_api_service_proto = out.File
	file_api_service_proto_rawDesc = nil
	file_api_service_proto_goTypes = nil
	file_api_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FeedsClient is the client API for Feeds service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FeedsClient interface {
	// activities.proto
	AddActivity(ctx context.Context, in *AddActivityRequest, opts ...grpc.CallOption) (*AddActivityResponse, error)
	GetActivity(ctx context.Context, in *GetActivityRequest, opts ...grpc.CallOption) (*GetActivityResponse, error)
	GetActivityByObjectID(ctx context.Context, in *GetActivityByObjectIDRequest, opts ...grpc.CallOption) (*GetActivityByObjectIDResponse, error)
	UpdateActivity(ctx context.Context, in *UpdateActivityRequest, opts ...grpc.CallOption) (*UpdateActivityResponse, error)
	DeleteActivity(ctx context.Context, in *DeleteActivityRequest, opts ...grpc.CallOption) (*DeleteActivityResponse, error)
	// feeds.proto
	CreateFeed(ctx context.Context, in *CreateFeedRequest, opts ...grpc.CallOption) (*CreateFeedResponse, error)
	GetFeed(ctx context.Context, in *GetFeedRequest, opts ...grpc.CallOption) (*GetFeedResponse, error)
	GetFeedActivities(ctx context.Context, in *GetFeedActivitiesRequest, opts ...grpc.CallOption) (*GetFeedActivitiesResponse, error)
	UpdateFeed(ctx context.Context, in *UpdateFeedRequest, opts ...grpc.CallOption) (*UpdateFeedResponse, error)
	DeleteFeed(ctx context.Context, in *DeleteFeedRequest, opts ...grpc.CallOption) (*DeleteFeedResponse, error)
	// collections.proto
	CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*CreateCollectionResponse, error)
	CreateObject(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*CreateObjectResponse, error)
	GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error)
	UpdateObject(ctx context.Context, in *UpdateObjectRequest, opts ...grpc.CallOption) (*UpdateObjectResponse, error)
	DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error)
	// reactions.proto
	CreateReaction(ctx context.Context, in *CreateReactionRequest, opts ...grpc.CallOption) (*CreateReactionResponse, error)
	GetReation(ctx context.Context, in *GetReationRequest, opts ...grpc.CallOption) (*GetReationResponse, error)
	UpdateReaction(ctx context.Context, in *UpdateReactionRequest, opts ...grpc.CallOption) (*UpdateReactionResponse, error)
	DeleteReaction(ctx context.Context, in *DeleteReactionRequest, opts ...grpc.CallOption) (*DeleteReactionResponse, error)
	// grouppingFeeds.proto
	CreateGroupingFeed(ctx context.Context, in *CreateGroupingFeedRequest, opts ...grpc.CallOption) (*CreateGroupingFeedResponse, error)
	GetGroupingFeed(ctx context.Context, in *GetGroupingFeedRequest, opts ...grpc.CallOption) (*GetGroupingFeedResponse, error)
	GetGroupingFeedActivities(ctx context.Context, in *GetGroupingFeedActivitiesRequest, opts ...grpc.CallOption) (*GetGroupingFeedActivitiesResponse, error)
	UpdateGroupingFeed(ctx context.Context, in *UpdateGroupingFeedRequest, opts ...grpc.CallOption) (*UpdateGroupingFeedResponse, error)
	DeleteGroupingFeed(ctx context.Context, in *DeleteGroupingFeedRequest, opts ...grpc.CallOption) (*DeleteGroupingFeedResponse, error)
}

type feedsClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedsClient(cc grpc.ClientConnInterface) FeedsClient {
	return &feedsClient{cc}
}

func (c *feedsClient) AddActivity(ctx context.Context, in *AddActivityRequest, opts ...grpc.CallOption) (*AddActivityResponse, error) {
	out := new(AddActivityResponse)
	err := c.cc.Invoke(ctx, "/syntoks_feed.Feeds/AddActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsClient) GetActivity(ctx context.Context, in *GetActivityRequest, opts ...grpc.CallOption) (*GetActivityResponse, error) {
	out := new(GetActivityResponse)
	err := c.cc.Invoke(ctx, "/syntoks_feed.Feeds/GetActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsClient) GetActivityByObjectID(ctx context.Context, in *GetActivityByObjectIDRequest, opts ...grpc.CallOption) (*GetActivityByObjectIDResponse, error) {
	out := new(GetActivityByObjectIDResponse)
	err := c.cc.Invoke(ctx, "/syntoks_feed.Feeds/GetActivityByObjectID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsClient) UpdateActivity(ctx context.Context, in *UpdateActivityRequest, opts ...grpc.CallOption) (*UpdateActivityResponse, error) {
	out := new(UpdateActivityResponse)
	err := c.cc.Invoke(ctx, "/syntoks_feed.Feeds/UpdateActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsClient) DeleteActivity(ctx context.Context, in *DeleteActivityRequest, opts ...grpc.CallOption) (*DeleteActivityResponse, error) {
	out := new(DeleteActivityResponse)
	err := c.cc.Invoke(ctx, "/syntoks_feed.Feeds/DeleteActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsClient) CreateFeed(ctx context.Context, in *CreateFeedRequest, opts ...grpc.CallOption) (*CreateFeedResponse, error) {
	out := new(CreateFeedResponse)
	err := c.cc.Invoke(ctx, "/syntoks_feed.Feeds/CreateFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsClient) GetFeed(ctx context.Context, in *GetFeedRequest, opts ...grpc.CallOption) (*GetFeedResponse, error) {
	out := new(GetFeedResponse)
	err := c.cc.Invoke(ctx, "/syntoks_feed.Feeds/GetFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsClient) GetFeedActivities(ctx context.Context, in *GetFeedActivitiesRequest, opts ...grpc.CallOption) (*GetFeedActivitiesResponse, error) {
	out := new(GetFeedActivitiesResponse)
	err := c.cc.Invoke(ctx, "/syntoks_feed.Feeds/GetFeedActivities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsClient) UpdateFeed(ctx context.Context, in *UpdateFeedRequest, opts ...grpc.CallOption) (*UpdateFeedResponse, error) {
	out := new(UpdateFeedResponse)
	err := c.cc.Invoke(ctx, "/syntoks_feed.Feeds/UpdateFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsClient) DeleteFeed(ctx context.Context, in *DeleteFeedRequest, opts ...grpc.CallOption) (*DeleteFeedResponse, error) {
	out := new(DeleteFeedResponse)
	err := c.cc.Invoke(ctx, "/syntoks_feed.Feeds/DeleteFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsClient) CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*CreateCollectionResponse, error) {
	out := new(CreateCollectionResponse)
	err := c.cc.Invoke(ctx, "/syntoks_feed.Feeds/CreateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsClient) CreateObject(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*CreateObjectResponse, error) {
	out := new(CreateObjectResponse)
	err := c.cc.Invoke(ctx, "/syntoks_feed.Feeds/CreateObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsClient) GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error) {
	out := new(GetObjectResponse)
	err := c.cc.Invoke(ctx, "/syntoks_feed.Feeds/GetObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsClient) UpdateObject(ctx context.Context, in *UpdateObjectRequest, opts ...grpc.CallOption) (*UpdateObjectResponse, error) {
	out := new(UpdateObjectResponse)
	err := c.cc.Invoke(ctx, "/syntoks_feed.Feeds/UpdateObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsClient) DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error) {
	out := new(DeleteObjectResponse)
	err := c.cc.Invoke(ctx, "/syntoks_feed.Feeds/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsClient) CreateReaction(ctx context.Context, in *CreateReactionRequest, opts ...grpc.CallOption) (*CreateReactionResponse, error) {
	out := new(CreateReactionResponse)
	err := c.cc.Invoke(ctx, "/syntoks_feed.Feeds/CreateReaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsClient) GetReation(ctx context.Context, in *GetReationRequest, opts ...grpc.CallOption) (*GetReationResponse, error) {
	out := new(GetReationResponse)
	err := c.cc.Invoke(ctx, "/syntoks_feed.Feeds/GetReation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsClient) UpdateReaction(ctx context.Context, in *UpdateReactionRequest, opts ...grpc.CallOption) (*UpdateReactionResponse, error) {
	out := new(UpdateReactionResponse)
	err := c.cc.Invoke(ctx, "/syntoks_feed.Feeds/UpdateReaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsClient) DeleteReaction(ctx context.Context, in *DeleteReactionRequest, opts ...grpc.CallOption) (*DeleteReactionResponse, error) {
	out := new(DeleteReactionResponse)
	err := c.cc.Invoke(ctx, "/syntoks_feed.Feeds/DeleteReaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsClient) CreateGroupingFeed(ctx context.Context, in *CreateGroupingFeedRequest, opts ...grpc.CallOption) (*CreateGroupingFeedResponse, error) {
	out := new(CreateGroupingFeedResponse)
	err := c.cc.Invoke(ctx, "/syntoks_feed.Feeds/CreateGroupingFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsClient) GetGroupingFeed(ctx context.Context, in *GetGroupingFeedRequest, opts ...grpc.CallOption) (*GetGroupingFeedResponse, error) {
	out := new(GetGroupingFeedResponse)
	err := c.cc.Invoke(ctx, "/syntoks_feed.Feeds/GetGroupingFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsClient) GetGroupingFeedActivities(ctx context.Context, in *GetGroupingFeedActivitiesRequest, opts ...grpc.CallOption) (*GetGroupingFeedActivitiesResponse, error) {
	out := new(GetGroupingFeedActivitiesResponse)
	err := c.cc.Invoke(ctx, "/syntoks_feed.Feeds/GetGroupingFeedActivities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsClient) UpdateGroupingFeed(ctx context.Context, in *UpdateGroupingFeedRequest, opts ...grpc.CallOption) (*UpdateGroupingFeedResponse, error) {
	out := new(UpdateGroupingFeedResponse)
	err := c.cc.Invoke(ctx, "/syntoks_feed.Feeds/UpdateGroupingFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedsClient) DeleteGroupingFeed(ctx context.Context, in *DeleteGroupingFeedRequest, opts ...grpc.CallOption) (*DeleteGroupingFeedResponse, error) {
	out := new(DeleteGroupingFeedResponse)
	err := c.cc.Invoke(ctx, "/syntoks_feed.Feeds/DeleteGroupingFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedsServer is the server API for Feeds service.
type FeedsServer interface {
	// activities.proto
	AddActivity(context.Context, *AddActivityRequest) (*AddActivityResponse, error)
	GetActivity(context.Context, *GetActivityRequest) (*GetActivityResponse, error)
	GetActivityByObjectID(context.Context, *GetActivityByObjectIDRequest) (*GetActivityByObjectIDResponse, error)
	UpdateActivity(context.Context, *UpdateActivityRequest) (*UpdateActivityResponse, error)
	DeleteActivity(context.Context, *DeleteActivityRequest) (*DeleteActivityResponse, error)
	// feeds.proto
	CreateFeed(context.Context, *CreateFeedRequest) (*CreateFeedResponse, error)
	GetFeed(context.Context, *GetFeedRequest) (*GetFeedResponse, error)
	GetFeedActivities(context.Context, *GetFeedActivitiesRequest) (*GetFeedActivitiesResponse, error)
	UpdateFeed(context.Context, *UpdateFeedRequest) (*UpdateFeedResponse, error)
	DeleteFeed(context.Context, *DeleteFeedRequest) (*DeleteFeedResponse, error)
	// collections.proto
	CreateCollection(context.Context, *CreateCollectionRequest) (*CreateCollectionResponse, error)
	CreateObject(context.Context, *CreateObjectRequest) (*CreateObjectResponse, error)
	GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error)
	UpdateObject(context.Context, *UpdateObjectRequest) (*UpdateObjectResponse, error)
	DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error)
	// reactions.proto
	CreateReaction(context.Context, *CreateReactionRequest) (*CreateReactionResponse, error)
	GetReation(context.Context, *GetReationRequest) (*GetReationResponse, error)
	UpdateReaction(context.Context, *UpdateReactionRequest) (*UpdateReactionResponse, error)
	DeleteReaction(context.Context, *DeleteReactionRequest) (*DeleteReactionResponse, error)
	// grouppingFeeds.proto
	CreateGroupingFeed(context.Context, *CreateGroupingFeedRequest) (*CreateGroupingFeedResponse, error)
	GetGroupingFeed(context.Context, *GetGroupingFeedRequest) (*GetGroupingFeedResponse, error)
	GetGroupingFeedActivities(context.Context, *GetGroupingFeedActivitiesRequest) (*GetGroupingFeedActivitiesResponse, error)
	UpdateGroupingFeed(context.Context, *UpdateGroupingFeedRequest) (*UpdateGroupingFeedResponse, error)
	DeleteGroupingFeed(context.Context, *DeleteGroupingFeedRequest) (*DeleteGroupingFeedResponse, error)
}

// UnimplementedFeedsServer can be embedded to have forward compatible implementations.
type UnimplementedFeedsServer struct {
}

func (*UnimplementedFeedsServer) AddActivity(context.Context, *AddActivityRequest) (*AddActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddActivity not implemented")
}
func (*UnimplementedFeedsServer) GetActivity(context.Context, *GetActivityRequest) (*GetActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivity not implemented")
}
func (*UnimplementedFeedsServer) GetActivityByObjectID(context.Context, *GetActivityByObjectIDRequest) (*GetActivityByObjectIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivityByObjectID not implemented")
}
func (*UnimplementedFeedsServer) UpdateActivity(context.Context, *UpdateActivityRequest) (*UpdateActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActivity not implemented")
}
func (*UnimplementedFeedsServer) DeleteActivity(context.Context, *DeleteActivityRequest) (*DeleteActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteActivity not implemented")
}
func (*UnimplementedFeedsServer) CreateFeed(context.Context, *CreateFeedRequest) (*CreateFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeed not implemented")
}
func (*UnimplementedFeedsServer) GetFeed(context.Context, *GetFeedRequest) (*GetFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeed not implemented")
}
func (*UnimplementedFeedsServer) GetFeedActivities(context.Context, *GetFeedActivitiesRequest) (*GetFeedActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedActivities not implemented")
}
func (*UnimplementedFeedsServer) UpdateFeed(context.Context, *UpdateFeedRequest) (*UpdateFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeed not implemented")
}
func (*UnimplementedFeedsServer) DeleteFeed(context.Context, *DeleteFeedRequest) (*DeleteFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeed not implemented")
}
func (*UnimplementedFeedsServer) CreateCollection(context.Context, *CreateCollectionRequest) (*CreateCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (*UnimplementedFeedsServer) CreateObject(context.Context, *CreateObjectRequest) (*CreateObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObject not implemented")
}
func (*UnimplementedFeedsServer) GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (*UnimplementedFeedsServer) UpdateObject(context.Context, *UpdateObjectRequest) (*UpdateObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObject not implemented")
}
func (*UnimplementedFeedsServer) DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (*UnimplementedFeedsServer) CreateReaction(context.Context, *CreateReactionRequest) (*CreateReactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReaction not implemented")
}
func (*UnimplementedFeedsServer) GetReation(context.Context, *GetReationRequest) (*GetReationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReation not implemented")
}
func (*UnimplementedFeedsServer) UpdateReaction(context.Context, *UpdateReactionRequest) (*UpdateReactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReaction not implemented")
}
func (*UnimplementedFeedsServer) DeleteReaction(context.Context, *DeleteReactionRequest) (*DeleteReactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReaction not implemented")
}
func (*UnimplementedFeedsServer) CreateGroupingFeed(context.Context, *CreateGroupingFeedRequest) (*CreateGroupingFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupingFeed not implemented")
}
func (*UnimplementedFeedsServer) GetGroupingFeed(context.Context, *GetGroupingFeedRequest) (*GetGroupingFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupingFeed not implemented")
}
func (*UnimplementedFeedsServer) GetGroupingFeedActivities(context.Context, *GetGroupingFeedActivitiesRequest) (*GetGroupingFeedActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupingFeedActivities not implemented")
}
func (*UnimplementedFeedsServer) UpdateGroupingFeed(context.Context, *UpdateGroupingFeedRequest) (*UpdateGroupingFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupingFeed not implemented")
}
func (*UnimplementedFeedsServer) DeleteGroupingFeed(context.Context, *DeleteGroupingFeedRequest) (*DeleteGroupingFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupingFeed not implemented")
}

func RegisterFeedsServer(s *grpc.Server, srv FeedsServer) {
	s.RegisterService(&_Feeds_serviceDesc, srv)
}

func _Feeds_AddActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServer).AddActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syntoks_feed.Feeds/AddActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServer).AddActivity(ctx, req.(*AddActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feeds_GetActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServer).GetActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syntoks_feed.Feeds/GetActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServer).GetActivity(ctx, req.(*GetActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feeds_GetActivityByObjectID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityByObjectIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServer).GetActivityByObjectID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syntoks_feed.Feeds/GetActivityByObjectID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServer).GetActivityByObjectID(ctx, req.(*GetActivityByObjectIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feeds_UpdateActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServer).UpdateActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syntoks_feed.Feeds/UpdateActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServer).UpdateActivity(ctx, req.(*UpdateActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feeds_DeleteActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServer).DeleteActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syntoks_feed.Feeds/DeleteActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServer).DeleteActivity(ctx, req.(*DeleteActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feeds_CreateFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServer).CreateFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syntoks_feed.Feeds/CreateFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServer).CreateFeed(ctx, req.(*CreateFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feeds_GetFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServer).GetFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syntoks_feed.Feeds/GetFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServer).GetFeed(ctx, req.(*GetFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feeds_GetFeedActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServer).GetFeedActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syntoks_feed.Feeds/GetFeedActivities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServer).GetFeedActivities(ctx, req.(*GetFeedActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feeds_UpdateFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServer).UpdateFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syntoks_feed.Feeds/UpdateFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServer).UpdateFeed(ctx, req.(*UpdateFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feeds_DeleteFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServer).DeleteFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syntoks_feed.Feeds/DeleteFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServer).DeleteFeed(ctx, req.(*DeleteFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feeds_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syntoks_feed.Feeds/CreateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServer).CreateCollection(ctx, req.(*CreateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feeds_CreateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServer).CreateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syntoks_feed.Feeds/CreateObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServer).CreateObject(ctx, req.(*CreateObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feeds_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syntoks_feed.Feeds/GetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServer).GetObject(ctx, req.(*GetObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feeds_UpdateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServer).UpdateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syntoks_feed.Feeds/UpdateObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServer).UpdateObject(ctx, req.(*UpdateObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feeds_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syntoks_feed.Feeds/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServer).DeleteObject(ctx, req.(*DeleteObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feeds_CreateReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServer).CreateReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syntoks_feed.Feeds/CreateReaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServer).CreateReaction(ctx, req.(*CreateReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feeds_GetReation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServer).GetReation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syntoks_feed.Feeds/GetReation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServer).GetReation(ctx, req.(*GetReationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feeds_UpdateReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServer).UpdateReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syntoks_feed.Feeds/UpdateReaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServer).UpdateReaction(ctx, req.(*UpdateReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feeds_DeleteReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServer).DeleteReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syntoks_feed.Feeds/DeleteReaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServer).DeleteReaction(ctx, req.(*DeleteReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feeds_CreateGroupingFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupingFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServer).CreateGroupingFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syntoks_feed.Feeds/CreateGroupingFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServer).CreateGroupingFeed(ctx, req.(*CreateGroupingFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feeds_GetGroupingFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupingFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServer).GetGroupingFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syntoks_feed.Feeds/GetGroupingFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServer).GetGroupingFeed(ctx, req.(*GetGroupingFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feeds_GetGroupingFeedActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupingFeedActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServer).GetGroupingFeedActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syntoks_feed.Feeds/GetGroupingFeedActivities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServer).GetGroupingFeedActivities(ctx, req.(*GetGroupingFeedActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feeds_UpdateGroupingFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupingFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServer).UpdateGroupingFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syntoks_feed.Feeds/UpdateGroupingFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServer).UpdateGroupingFeed(ctx, req.(*UpdateGroupingFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feeds_DeleteGroupingFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupingFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedsServer).DeleteGroupingFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syntoks_feed.Feeds/DeleteGroupingFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedsServer).DeleteGroupingFeed(ctx, req.(*DeleteGroupingFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Feeds_serviceDesc = grpc.ServiceDesc{
	ServiceName: "syntoks_feed.Feeds",
	HandlerType: (*FeedsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddActivity",
			Handler:    _Feeds_AddActivity_Handler,
		},
		{
			MethodName: "GetActivity",
			Handler:    _Feeds_GetActivity_Handler,
		},
		{
			MethodName: "GetActivityByObjectID",
			Handler:    _Feeds_GetActivityByObjectID_Handler,
		},
		{
			MethodName: "UpdateActivity",
			Handler:    _Feeds_UpdateActivity_Handler,
		},
		{
			MethodName: "DeleteActivity",
			Handler:    _Feeds_DeleteActivity_Handler,
		},
		{
			MethodName: "CreateFeed",
			Handler:    _Feeds_CreateFeed_Handler,
		},
		{
			MethodName: "GetFeed",
			Handler:    _Feeds_GetFeed_Handler,
		},
		{
			MethodName: "GetFeedActivities",
			Handler:    _Feeds_GetFeedActivities_Handler,
		},
		{
			MethodName: "UpdateFeed",
			Handler:    _Feeds_UpdateFeed_Handler,
		},
		{
			MethodName: "DeleteFeed",
			Handler:    _Feeds_DeleteFeed_Handler,
		},
		{
			MethodName: "CreateCollection",
			Handler:    _Feeds_CreateCollection_Handler,
		},
		{
			MethodName: "CreateObject",
			Handler:    _Feeds_CreateObject_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _Feeds_GetObject_Handler,
		},
		{
			MethodName: "UpdateObject",
			Handler:    _Feeds_UpdateObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _Feeds_DeleteObject_Handler,
		},
		{
			MethodName: "CreateReaction",
			Handler:    _Feeds_CreateReaction_Handler,
		},
		{
			MethodName: "GetReation",
			Handler:    _Feeds_GetReation_Handler,
		},
		{
			MethodName: "UpdateReaction",
			Handler:    _Feeds_UpdateReaction_Handler,
		},
		{
			MethodName: "DeleteReaction",
			Handler:    _Feeds_DeleteReaction_Handler,
		},
		{
			MethodName: "CreateGroupingFeed",
			Handler:    _Feeds_CreateGroupingFeed_Handler,
		},
		{
			MethodName: "GetGroupingFeed",
			Handler:    _Feeds_GetGroupingFeed_Handler,
		},
		{
			MethodName: "GetGroupingFeedActivities",
			Handler:    _Feeds_GetGroupingFeedActivities_Handler,
		},
		{
			MethodName: "UpdateGroupingFeed",
			Handler:    _Feeds_UpdateGroupingFeed_Handler,
		},
		{
			MethodName: "DeleteGroupingFeed",
			Handler:    _Feeds_DeleteGroupingFeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/service.proto",
}
