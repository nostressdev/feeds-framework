// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/feeds.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateFeedRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateFeedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFeedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFeedRequestMultiError, or nil if none found.
func (m *CreateFeedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFeedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetExtraData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFeedRequestValidationError{
					field:  "ExtraData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFeedRequestValidationError{
					field:  "ExtraData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtraData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFeedRequestValidationError{
				field:  "ExtraData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateFeedRequestMultiError(errors)
	}
	return nil
}

// CreateFeedRequestMultiError is an error wrapping multiple validation errors
// returned by CreateFeedRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateFeedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFeedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFeedRequestMultiError) AllErrors() []error { return m }

// CreateFeedRequestValidationError is the validation error returned by
// CreateFeedRequest.Validate if the designated constraints aren't met.
type CreateFeedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFeedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFeedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFeedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFeedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFeedRequestValidationError) ErrorName() string {
	return "CreateFeedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFeedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFeedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFeedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFeedRequestValidationError{}

// Validate checks the field values on CreateFeedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFeedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFeedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFeedResponseMultiError, or nil if none found.
func (m *CreateFeedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFeedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFeed()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFeedResponseValidationError{
					field:  "Feed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFeedResponseValidationError{
					field:  "Feed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFeed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFeedResponseValidationError{
				field:  "Feed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateFeedResponseMultiError(errors)
	}
	return nil
}

// CreateFeedResponseMultiError is an error wrapping multiple validation errors
// returned by CreateFeedResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateFeedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFeedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFeedResponseMultiError) AllErrors() []error { return m }

// CreateFeedResponseValidationError is the validation error returned by
// CreateFeedResponse.Validate if the designated constraints aren't met.
type CreateFeedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFeedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFeedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFeedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFeedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFeedResponseValidationError) ErrorName() string {
	return "CreateFeedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFeedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFeedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFeedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFeedResponseValidationError{}

// Validate checks the field values on UpdateFeedRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateFeedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFeedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFeedRequestMultiError, or nil if none found.
func (m *UpdateFeedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFeedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFeedId()) < 1 {
		err := UpdateFeedRequestValidationError{
			field:  "FeedId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetExtraData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFeedRequestValidationError{
					field:  "ExtraData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFeedRequestValidationError{
					field:  "ExtraData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtraData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFeedRequestValidationError{
				field:  "ExtraData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateFeedRequestMultiError(errors)
	}
	return nil
}

// UpdateFeedRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateFeedRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateFeedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFeedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFeedRequestMultiError) AllErrors() []error { return m }

// UpdateFeedRequestValidationError is the validation error returned by
// UpdateFeedRequest.Validate if the designated constraints aren't met.
type UpdateFeedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFeedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFeedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFeedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFeedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFeedRequestValidationError) ErrorName() string {
	return "UpdateFeedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFeedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFeedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFeedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFeedRequestValidationError{}

// Validate checks the field values on UpdateFeedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFeedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFeedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFeedResponseMultiError, or nil if none found.
func (m *UpdateFeedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFeedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFeed()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFeedResponseValidationError{
					field:  "Feed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFeedResponseValidationError{
					field:  "Feed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFeed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFeedResponseValidationError{
				field:  "Feed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateFeedResponseMultiError(errors)
	}
	return nil
}

// UpdateFeedResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateFeedResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateFeedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFeedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFeedResponseMultiError) AllErrors() []error { return m }

// UpdateFeedResponseValidationError is the validation error returned by
// UpdateFeedResponse.Validate if the designated constraints aren't met.
type UpdateFeedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFeedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFeedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFeedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFeedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFeedResponseValidationError) ErrorName() string {
	return "UpdateFeedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFeedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFeedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFeedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFeedResponseValidationError{}

// Validate checks the field values on DeleteFeedRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteFeedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFeedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFeedRequestMultiError, or nil if none found.
func (m *DeleteFeedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFeedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFeedId()) < 1 {
		err := DeleteFeedRequestValidationError{
			field:  "FeedId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteFeedRequestMultiError(errors)
	}
	return nil
}

// DeleteFeedRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteFeedRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteFeedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFeedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFeedRequestMultiError) AllErrors() []error { return m }

// DeleteFeedRequestValidationError is the validation error returned by
// DeleteFeedRequest.Validate if the designated constraints aren't met.
type DeleteFeedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFeedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFeedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFeedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFeedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFeedRequestValidationError) ErrorName() string {
	return "DeleteFeedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFeedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFeedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFeedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFeedRequestValidationError{}

// Validate checks the field values on DeleteFeedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFeedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFeedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFeedResponseMultiError, or nil if none found.
func (m *DeleteFeedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFeedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteFeedResponseMultiError(errors)
	}
	return nil
}

// DeleteFeedResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteFeedResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteFeedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFeedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFeedResponseMultiError) AllErrors() []error { return m }

// DeleteFeedResponseValidationError is the validation error returned by
// DeleteFeedResponse.Validate if the designated constraints aren't met.
type DeleteFeedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFeedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFeedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFeedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFeedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFeedResponseValidationError) ErrorName() string {
	return "DeleteFeedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFeedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFeedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFeedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFeedResponseValidationError{}

// Validate checks the field values on GetFeedRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFeedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFeedRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFeedRequestMultiError,
// or nil if none found.
func (m *GetFeedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFeedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFeedId()) < 1 {
		err := GetFeedRequestValidationError{
			field:  "FeedId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFeedRequestMultiError(errors)
	}
	return nil
}

// GetFeedRequestMultiError is an error wrapping multiple validation errors
// returned by GetFeedRequest.ValidateAll() if the designated constraints
// aren't met.
type GetFeedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFeedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFeedRequestMultiError) AllErrors() []error { return m }

// GetFeedRequestValidationError is the validation error returned by
// GetFeedRequest.Validate if the designated constraints aren't met.
type GetFeedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFeedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFeedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFeedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFeedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFeedRequestValidationError) ErrorName() string { return "GetFeedRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetFeedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFeedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFeedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFeedRequestValidationError{}

// Validate checks the field values on GetFeedResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFeedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFeedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFeedResponseMultiError, or nil if none found.
func (m *GetFeedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFeedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFeed()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFeedResponseValidationError{
					field:  "Feed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFeedResponseValidationError{
					field:  "Feed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFeed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFeedResponseValidationError{
				field:  "Feed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFeedResponseMultiError(errors)
	}
	return nil
}

// GetFeedResponseMultiError is an error wrapping multiple validation errors
// returned by GetFeedResponse.ValidateAll() if the designated constraints
// aren't met.
type GetFeedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFeedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFeedResponseMultiError) AllErrors() []error { return m }

// GetFeedResponseValidationError is the validation error returned by
// GetFeedResponse.Validate if the designated constraints aren't met.
type GetFeedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFeedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFeedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFeedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFeedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFeedResponseValidationError) ErrorName() string { return "GetFeedResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetFeedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFeedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFeedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFeedResponseValidationError{}

// Validate checks the field values on GetFeedActivitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFeedActivitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFeedActivitiesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFeedActivitiesRequestMultiError, or nil if none found.
func (m *GetFeedActivitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFeedActivitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFeedId()) < 1 {
		err := GetFeedActivitiesRequestValidationError{
			field:  "FeedId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Limit

	// no validation rules for OffsetId

	if len(errors) > 0 {
		return GetFeedActivitiesRequestMultiError(errors)
	}
	return nil
}

// GetFeedActivitiesRequestMultiError is an error wrapping multiple validation
// errors returned by GetFeedActivitiesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFeedActivitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFeedActivitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFeedActivitiesRequestMultiError) AllErrors() []error { return m }

// GetFeedActivitiesRequestValidationError is the validation error returned by
// GetFeedActivitiesRequest.Validate if the designated constraints aren't met.
type GetFeedActivitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFeedActivitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFeedActivitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFeedActivitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFeedActivitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFeedActivitiesRequestValidationError) ErrorName() string {
	return "GetFeedActivitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFeedActivitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFeedActivitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFeedActivitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFeedActivitiesRequestValidationError{}

// Validate checks the field values on GetFeedActivitiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFeedActivitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFeedActivitiesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFeedActivitiesResponseMultiError, or nil if none found.
func (m *GetFeedActivitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFeedActivitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetActivities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFeedActivitiesResponseValidationError{
						field:  fmt.Sprintf("Activities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFeedActivitiesResponseValidationError{
						field:  fmt.Sprintf("Activities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFeedActivitiesResponseValidationError{
					field:  fmt.Sprintf("Activities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFeedActivitiesResponseMultiError(errors)
	}
	return nil
}

// GetFeedActivitiesResponseMultiError is an error wrapping multiple validation
// errors returned by GetFeedActivitiesResponse.ValidateAll() if the
// designated constraints aren't met.
type GetFeedActivitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFeedActivitiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFeedActivitiesResponseMultiError) AllErrors() []error { return m }

// GetFeedActivitiesResponseValidationError is the validation error returned by
// GetFeedActivitiesResponse.Validate if the designated constraints aren't met.
type GetFeedActivitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFeedActivitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFeedActivitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFeedActivitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFeedActivitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFeedActivitiesResponseValidationError) ErrorName() string {
	return "GetFeedActivitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFeedActivitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFeedActivitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFeedActivitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFeedActivitiesResponseValidationError{}
