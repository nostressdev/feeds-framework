// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/feeds.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateFeedRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateFeedRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	if v, ok := interface{}(m.GetExtraData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFeedRequestValidationError{
				field:  "ExtraData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateFeedRequestValidationError is the validation error returned by
// CreateFeedRequest.Validate if the designated constraints aren't met.
type CreateFeedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFeedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFeedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFeedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFeedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFeedRequestValidationError) ErrorName() string {
	return "CreateFeedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFeedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFeedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFeedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFeedRequestValidationError{}

// Validate checks the field values on CreateFeedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateFeedResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFeed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFeedResponseValidationError{
				field:  "Feed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateFeedResponseValidationError is the validation error returned by
// CreateFeedResponse.Validate if the designated constraints aren't met.
type CreateFeedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFeedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFeedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFeedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFeedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFeedResponseValidationError) ErrorName() string {
	return "CreateFeedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFeedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFeedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFeedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFeedResponseValidationError{}

// Validate checks the field values on AddActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddActivityRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetFeedId()) < 1 {
		return AddActivityRequestValidationError{
			field:  "FeedId",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetForeignObjectId()) < 1 {
		return AddActivityRequestValidationError{
			field:  "ForeignObjectId",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Time

	// no validation rules for UserId

	// no validation rules for ActivityType

	if v, ok := interface{}(m.GetExtraData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddActivityRequestValidationError{
				field:  "ExtraData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddActivityRequestValidationError is the validation error returned by
// AddActivityRequest.Validate if the designated constraints aren't met.
type AddActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddActivityRequestValidationError) ErrorName() string {
	return "AddActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddActivityRequestValidationError{}

// Validate checks the field values on AddActivityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddActivityResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetActivity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddActivityResponseValidationError{
				field:  "Activity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddActivityResponseValidationError is the validation error returned by
// AddActivityResponse.Validate if the designated constraints aren't met.
type AddActivityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddActivityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddActivityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddActivityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddActivityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddActivityResponseValidationError) ErrorName() string {
	return "AddActivityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddActivityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddActivityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddActivityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddActivityResponseValidationError{}

// Validate checks the field values on UpdateActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateActivityRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetActivityId()) < 1 {
		return UpdateActivityRequestValidationError{
			field:  "ActivityId",
			reason: "value length must be at least 1 runes",
		}
	}

	if v, ok := interface{}(m.GetExtraData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateActivityRequestValidationError{
				field:  "ExtraData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateActivityRequestValidationError is the validation error returned by
// UpdateActivityRequest.Validate if the designated constraints aren't met.
type UpdateActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateActivityRequestValidationError) ErrorName() string {
	return "UpdateActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateActivityRequestValidationError{}

// Validate checks the field values on UpdateActivityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateActivityResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetActivity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateActivityResponseValidationError{
				field:  "Activity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateActivityResponseValidationError is the validation error returned by
// UpdateActivityResponse.Validate if the designated constraints aren't met.
type UpdateActivityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateActivityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateActivityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateActivityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateActivityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateActivityResponseValidationError) ErrorName() string {
	return "UpdateActivityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateActivityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateActivityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateActivityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateActivityResponseValidationError{}

// Validate checks the field values on UpdateFeedRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateFeedRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetFeedId()) < 1 {
		return UpdateFeedRequestValidationError{
			field:  "FeedId",
			reason: "value length must be at least 1 runes",
		}
	}

	if v, ok := interface{}(m.GetExtraData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFeedRequestValidationError{
				field:  "ExtraData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateFeedRequestValidationError is the validation error returned by
// UpdateFeedRequest.Validate if the designated constraints aren't met.
type UpdateFeedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFeedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFeedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFeedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFeedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFeedRequestValidationError) ErrorName() string {
	return "UpdateFeedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFeedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFeedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFeedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFeedRequestValidationError{}

// Validate checks the field values on UpdateFeedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateFeedResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFeed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFeedResponseValidationError{
				field:  "Feed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateFeedResponseValidationError is the validation error returned by
// UpdateFeedResponse.Validate if the designated constraints aren't met.
type UpdateFeedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFeedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFeedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFeedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFeedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFeedResponseValidationError) ErrorName() string {
	return "UpdateFeedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFeedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFeedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFeedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFeedResponseValidationError{}

// Validate checks the field values on DeleteActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteActivityRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetActivityId()) < 1 {
		return DeleteActivityRequestValidationError{
			field:  "ActivityId",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// DeleteActivityRequestValidationError is the validation error returned by
// DeleteActivityRequest.Validate if the designated constraints aren't met.
type DeleteActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteActivityRequestValidationError) ErrorName() string {
	return "DeleteActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteActivityRequestValidationError{}

// Validate checks the field values on DeleteActivityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteActivityResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteActivityResponseValidationError is the validation error returned by
// DeleteActivityResponse.Validate if the designated constraints aren't met.
type DeleteActivityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteActivityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteActivityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteActivityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteActivityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteActivityResponseValidationError) ErrorName() string {
	return "DeleteActivityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteActivityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteActivityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteActivityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteActivityResponseValidationError{}

// Validate checks the field values on DeleteFeedRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteFeedRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetFeedId()) < 1 {
		return DeleteFeedRequestValidationError{
			field:  "FeedId",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// DeleteFeedRequestValidationError is the validation error returned by
// DeleteFeedRequest.Validate if the designated constraints aren't met.
type DeleteFeedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFeedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFeedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFeedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFeedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFeedRequestValidationError) ErrorName() string {
	return "DeleteFeedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFeedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFeedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFeedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFeedRequestValidationError{}

// Validate checks the field values on DeleteFeedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteFeedResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteFeedResponseValidationError is the validation error returned by
// DeleteFeedResponse.Validate if the designated constraints aren't met.
type DeleteFeedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFeedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFeedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFeedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFeedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFeedResponseValidationError) ErrorName() string {
	return "DeleteFeedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFeedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFeedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFeedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFeedResponseValidationError{}

// Validate checks the field values on GetActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetActivityRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetActivityId()) < 1 {
		return GetActivityRequestValidationError{
			field:  "ActivityId",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// GetActivityRequestValidationError is the validation error returned by
// GetActivityRequest.Validate if the designated constraints aren't met.
type GetActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActivityRequestValidationError) ErrorName() string {
	return "GetActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActivityRequestValidationError{}

// Validate checks the field values on GetActivityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetActivityResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetActivity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetActivityResponseValidationError{
				field:  "Activity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetActivityResponseValidationError is the validation error returned by
// GetActivityResponse.Validate if the designated constraints aren't met.
type GetActivityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActivityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActivityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActivityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActivityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActivityResponseValidationError) ErrorName() string {
	return "GetActivityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetActivityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActivityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActivityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActivityResponseValidationError{}

// Validate checks the field values on GetFeedRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetFeedRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetFeedId()) < 1 {
		return GetFeedRequestValidationError{
			field:  "FeedId",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// GetFeedRequestValidationError is the validation error returned by
// GetFeedRequest.Validate if the designated constraints aren't met.
type GetFeedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFeedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFeedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFeedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFeedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFeedRequestValidationError) ErrorName() string { return "GetFeedRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetFeedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFeedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFeedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFeedRequestValidationError{}

// Validate checks the field values on GetFeedResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetFeedResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFeed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFeedResponseValidationError{
				field:  "Feed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetFeedResponseValidationError is the validation error returned by
// GetFeedResponse.Validate if the designated constraints aren't met.
type GetFeedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFeedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFeedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFeedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFeedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFeedResponseValidationError) ErrorName() string { return "GetFeedResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetFeedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFeedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFeedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFeedResponseValidationError{}

// Validate checks the field values on GetFeedActivitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetFeedActivitiesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetFeedId()) < 1 {
		return GetFeedActivitiesRequestValidationError{
			field:  "FeedId",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Limit

	// no validation rules for OffsetId

	return nil
}

// GetFeedActivitiesRequestValidationError is the validation error returned by
// GetFeedActivitiesRequest.Validate if the designated constraints aren't met.
type GetFeedActivitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFeedActivitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFeedActivitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFeedActivitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFeedActivitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFeedActivitiesRequestValidationError) ErrorName() string {
	return "GetFeedActivitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFeedActivitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFeedActivitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFeedActivitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFeedActivitiesRequestValidationError{}

// Validate checks the field values on GetFeedActivitiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetFeedActivitiesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetActivities() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFeedActivitiesResponseValidationError{
					field:  fmt.Sprintf("Activities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetFeedActivitiesResponseValidationError is the validation error returned by
// GetFeedActivitiesResponse.Validate if the designated constraints aren't met.
type GetFeedActivitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFeedActivitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFeedActivitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFeedActivitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFeedActivitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFeedActivitiesResponseValidationError) ErrorName() string {
	return "GetFeedActivitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFeedActivitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFeedActivitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFeedActivitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFeedActivitiesResponseValidationError{}

// Validate checks the field values on GetActivityByObjectIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetActivityByObjectIDRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetForeignObjectId()) < 1 {
		return GetActivityByObjectIDRequestValidationError{
			field:  "ForeignObjectId",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// GetActivityByObjectIDRequestValidationError is the validation error returned
// by GetActivityByObjectIDRequest.Validate if the designated constraints
// aren't met.
type GetActivityByObjectIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActivityByObjectIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActivityByObjectIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActivityByObjectIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActivityByObjectIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActivityByObjectIDRequestValidationError) ErrorName() string {
	return "GetActivityByObjectIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetActivityByObjectIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActivityByObjectIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActivityByObjectIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActivityByObjectIDRequestValidationError{}

// Validate checks the field values on GetActivityByObjectIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetActivityByObjectIDResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetActivity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetActivityByObjectIDResponseValidationError{
				field:  "Activity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetActivityByObjectIDResponseValidationError is the validation error
// returned by GetActivityByObjectIDResponse.Validate if the designated
// constraints aren't met.
type GetActivityByObjectIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActivityByObjectIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActivityByObjectIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActivityByObjectIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActivityByObjectIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActivityByObjectIDResponseValidationError) ErrorName() string {
	return "GetActivityByObjectIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetActivityByObjectIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActivityByObjectIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActivityByObjectIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActivityByObjectIDResponseValidationError{}

// Validate checks the field values on CreateCollectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCollectionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CollectionId

	if _, ok := DeletingType_name[int32(m.GetDeletingType())]; !ok {
		return CreateCollectionRequestValidationError{
			field:  "DeletingType",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// CreateCollectionRequestValidationError is the validation error returned by
// CreateCollectionRequest.Validate if the designated constraints aren't met.
type CreateCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCollectionRequestValidationError) ErrorName() string {
	return "CreateCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCollectionRequestValidationError{}

// Validate checks the field values on CreateCollectionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCollectionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCollectionResponseValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateCollectionResponseValidationError is the validation error returned by
// CreateCollectionResponse.Validate if the designated constraints aren't met.
type CreateCollectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCollectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCollectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCollectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCollectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCollectionResponseValidationError) ErrorName() string {
	return "CreateCollectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCollectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCollectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCollectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCollectionResponseValidationError{}

// Validate checks the field values on CreateObjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateObjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCollectionId()) < 1 {
		return CreateObjectRequestValidationError{
			field:  "CollectionId",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for ObjectId

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateObjectRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateObjectRequestValidationError is the validation error returned by
// CreateObjectRequest.Validate if the designated constraints aren't met.
type CreateObjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateObjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateObjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateObjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateObjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateObjectRequestValidationError) ErrorName() string {
	return "CreateObjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateObjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateObjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateObjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateObjectRequestValidationError{}

// Validate checks the field values on CreateObjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateObjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateObjectResponseValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateObjectResponseValidationError is the validation error returned by
// CreateObjectResponse.Validate if the designated constraints aren't met.
type CreateObjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateObjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateObjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateObjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateObjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateObjectResponseValidationError) ErrorName() string {
	return "CreateObjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateObjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateObjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateObjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateObjectResponseValidationError{}

// Validate checks the field values on UpdateObjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateObjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCollectionId()) < 1 {
		return UpdateObjectRequestValidationError{
			field:  "CollectionId",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for ObjectId

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateObjectRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateObjectRequestValidationError is the validation error returned by
// UpdateObjectRequest.Validate if the designated constraints aren't met.
type UpdateObjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateObjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateObjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateObjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateObjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateObjectRequestValidationError) ErrorName() string {
	return "UpdateObjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateObjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateObjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateObjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateObjectRequestValidationError{}

// Validate checks the field values on UpdateObjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateObjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateObjectResponseValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateObjectResponseValidationError is the validation error returned by
// UpdateObjectResponse.Validate if the designated constraints aren't met.
type UpdateObjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateObjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateObjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateObjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateObjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateObjectResponseValidationError) ErrorName() string {
	return "UpdateObjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateObjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateObjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateObjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateObjectResponseValidationError{}

// Validate checks the field values on DeleteObjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteObjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCollectionId()) < 1 {
		return DeleteObjectRequestValidationError{
			field:  "CollectionId",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for ObjectId

	return nil
}

// DeleteObjectRequestValidationError is the validation error returned by
// DeleteObjectRequest.Validate if the designated constraints aren't met.
type DeleteObjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteObjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteObjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteObjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteObjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteObjectRequestValidationError) ErrorName() string {
	return "DeleteObjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteObjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteObjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteObjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteObjectRequestValidationError{}

// Validate checks the field values on DeleteObjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteObjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteObjectResponseValidationError is the validation error returned by
// DeleteObjectResponse.Validate if the designated constraints aren't met.
type DeleteObjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteObjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteObjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteObjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteObjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteObjectResponseValidationError) ErrorName() string {
	return "DeleteObjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteObjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteObjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteObjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteObjectResponseValidationError{}
